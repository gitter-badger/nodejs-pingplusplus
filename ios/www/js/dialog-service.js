// Generated by CoffeeScript 1.8.0
bumblebee.service('DialogService', function($rootScope, $http, $localstorage, $q, SignalrService) {
  var dialogs, service, types_entitys;
  dialogs = [];
  types_entitys = {};
  service = {
    pullData: function(callback) {
      var user;
      user = $localstorage.getObject('user');
      if (!user.id) {
        return;
      }
      return $http.get(glo_domain + ("dialogs/" + user.id + "/" + dialogs.length)).success(function(data) {
        data.forEach(function(el) {
          service.parseProperty(el);
          return dialogs.push(el);
        });
        $localstorage.setObject('dialogs', dialogs);
        if (callback) {
          return callback();
        }
      });
    },
    getAll: function() {
      return dialogs;
    },
    get: function(index) {
      return dialogs[index];
    },
    get_reverse: function(index) {
      return dialogs[dialogs.length - 1 - index];
    },
    add: function(dialog) {
      service.parseProperty(dialog);
      dialogs.unshift(dialog);
      $rootScope.$broadcast('dialog.added');
    },
    replace: function(old_dialog, new_dialog) {
      var dialog, index;
      dialog = _.findWhere(dialogs, {
        createTime: old_dialog.createTime
      });
      index = _.indexOf(dialogs, dialog);
      if (index !== -1) {
        service.parseProperty(new_dialog);
        dialogs[index] = new_dialog;
        $rootScope.$broadcast('dialog.replaced');
      }
    },
    clear: function() {
      return dialogs = [];
    },
    injectTypeData: function() {
      var deferred;
      types_entitys = {};
      deferred = $q.defer();
      $http.get(glo_domain + "dialogs/types").success(function(data) {
        types_entitys = data;
        return deferred.resolve(data);
      });
      return deferred.promise;
    },
    parseProperty: function(entity) {
      if (entity.type === 4) {
        entity.trans = JSON.parse(entity.content);
        if (!entity.selectChoiceValue) {
          return;
        }
        switch (entity.trans.type) {
          case 2:
            return entity.service_entity = _.findWhere(types_entitys.express_services, {
              value: entity.service
            });
          case 3:
            return entity.service_entity = _.findWhere(types_entitys.cleaning_services, {
              value: entity.service
            });
        }
      }
    },
    registerSignalr: function() {
      SignalrService.on('addDialog', function(dialog) {
        return service.add(dialog);
      });
      return SignalrService.on('replaceDialog', function(old_dialog, dialog) {
        return service.replace(old_dialog, dialog);
      });
    },
    postToSignalr: function(dialog) {
      var user;
      user = $localstorage.getObject('user');
      dialog.userId = user.id;
      dialog.managerId = user.managerId;
      dialog.senderName = user.nickname;
      return SignalrService.invoke('addDialog', dialog);
    },
    replaceSingleChoicesDialogToSignalr: function(dialog) {
      var old_dialog;
      old_dialog = _.clone(dialog);
      old_dialog.selectChoiceValue = 0;
      return SignalrService.invoke('replaceDialog', old_dialog, dialog);
    },
    replaceMultiChoicesDialogToSignalr: function(dialog) {
      var old_dialog;
      old_dialog = _.clone(dialog);
      old_dialog.choices.forEach(function(item) {
        return item.selected = false;
      });
      return SignalrService.invoke('replaceDialog', old_dialog, dialog);
    },
    replaceCardDialogToSignalr: function(dialog) {
      var old_dialog;
      old_dialog = _.clone(dialog);
      old_dialog.selectChoiceValue = 0;
      return SignalrService.invoke('replaceDialog', old_dialog, dialog);
    }
  };
  return service;
});

//# sourceMappingURL=dialog-service.js.map
