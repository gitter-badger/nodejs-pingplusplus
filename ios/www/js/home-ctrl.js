// Generated by CoffeeScript 1.8.0
bumblebee.controller("HomeCtrl", function($scope, $rootScope, $localstorage, $ionicModal, $http, $ionicScrollDelegate, $timeout, SignalrService, DialogService) {
  var box_width, constructor, lazyGetDialog, ol_msg, path_box, scrollBottom, text_box, user, voice_aperture, voice_btn, voice_throttled;
  user = $localstorage.getObject('user');
  scrollBottom = function() {
    $ionicScrollDelegate.resize();
    return $timeout(function() {
      return $ionicScrollDelegate.scrollBottom(true);
    }, 1);
  };
  ol_msg = $("ol.messages");
  lazyGetDialog = _.debounce(function() {
    if (ol_msg.scrollTop() === 0) {
      return DialogService.getDialog();
    }
  }, 300);
  ol_msg.scroll(lazyGetDialog);
  DialogService.registerSignalr();
  SignalrService.start();
  $('#subInput').on("keyup", function(e) {
    if (e.keyCode !== 13) {
      return;
    }
    if (!$scope.subText) {
      return;
    }
    DialogService.postToSignalr({
      type: 0,
      content: $scope.subText
    });
    return $scope.subText = "";
  });
  $scope.change_single_choices = function(dialog) {
    return DialogService.replaceSingleChoicesDialogToSignalr(dialog);
  };
  $scope.change_multi_choices = function(dialog) {
    return DialogService.replaceMultiChoicesDialogToSignalr(dialog);
  };
  $scope.$on('dialog.added', scrollBottom);
  $scope.$on('dialog.addByReplaced', scrollBottom);
  $scope.$on('dialog.replaced', scrollBottom);
  constructor = function() {
    var promise;
    promise = DialogService.injectTypeData();
    return promise.then(function(data) {
      DialogService.clear();
      return DialogService.pullData(function() {
        $scope.dialogs = DialogService.getAll();
        return scrollBottom();
      });
    });
  };
  $rootScope.$on('logined', constructor);
  constructor();
  path_box = $("#path-box");
  text_box = $("#text-box");
  $scope.switch_voice = function() {
    path_box.toggleClass('up').toggleClass('down', !path_box.hasClass('up'));
    text_box.toggle(!path_box.hasClass('up'));
  };
  $scope.switch_voice();
  voice_btn = $('#voice-btn');
  box_width = voice_btn.parent(".path-item").width();
  voice_aperture = $("#voice-aperture");
  $scope.start_voice = function() {
    var time_promise;
    if (!navigator.speech) {
      return;
    }
    navigator.speech.cancelListening();
    voice_btn.addClass("listening");
    time_promise = $timeout(function() {
      return voice_btn.removeClass("listening");
    }, 10000);
    navigator.speech.startListening({
      language: 'zh_cn',
      accent: 'mandarin'
    }, function(str) {
      voice_btn.removeClass("listening");
      DialogService.postToSignalr({
        type: 0,
        content: str
      });
      $timeout.cancel(time_promise);
    });
    voice_aperture.animate({
      height: box_width,
      width: box_width
    }, 150).animate({
      height: 68,
      width: 68
    }, 150);
  };
  voice_throttled = _.throttle(function(val) {
    return voice_aperture.animate({
      height: val,
      width: val
    }, 150);
  }, 150);
  if (navigator.speech) {
    navigator.speech.addEventListener("VolumeChanged", function(obj) {
      var val;
      val = parseInt(obj.volume) * 8;
      if (val > box_width) {
        val = box_width;
      } else if (val < 68) {
        val = 68;
      }
      return voice_throttled(val + "px");
    });
  }
  $http.get('help_list.json').success(function(data) {
    return $scope.help_list = data;
  });
  $ionicModal.fromTemplateUrl('templates/help-modal.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function(modal) {
    return $scope.help_modal = modal;
  });
  $scope.switch_help = function() {
    return $scope.help_modal.show();
  };
  $scope.close_help = function() {
    return $scope.help_modal.hide();
  };
  $scope.$on("$destory", function() {
    $scope.help_modal.remove();
    $('#subInput').off("keyup");
    return SignalrService.stop();
  });
});

bumblebee.filter('reverse', function() {
  return function(items) {
    if (items) {
      return items.slice().reverse();
    }
  };
});

bumblebee.filter('display_dialog', function() {
  return function(items) {
    if (items) {
      items.forEach(function(dialog) {
        if (dialog.trans) {
          if (dialog.trans.time) {
            return dialog.trans.displayTime = moment(dialog.trans.time).format('MMM DD, hh:mm');
          }
        }
      });
    }
    return items;
  };
});

//# sourceMappingURL=home-ctrl.js.map
